# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

custom("version") {
  script = "//build/util/version.py"

  # This script must be run before targets depending on us.
  hard_dep = true

  # Rerun the script any time this file changes.
  version_path    = "//hello-cbase/VERSION"
  branding_path   = "//hello-cbase/BRANDING"
  lastchange_path = "//build/util/LASTCHANGE"
  source_prereqs  = [ version_path,
                      branding_path,
                      lastchange_path ]

  template_header = "//hello-cbase/version.h.in"
  output_header   = "$root_gen_dir/version.h"
  outputs         = [ output_header ]

  build_version_path    = rebase_path(version_path, root_build_dir)
  build_branding_path   = rebase_path(branding_path, root_build_dir)
  build_lastchange_path = rebase_path(lastchange_path, root_build_dir)
  build_version_header  = rebase_path(output_header, root_build_dir)
  build_template_header = rebase_path(template_header, root_build_dir)

  args = [
    "-f", "$build_version_path",
    "-f", "$build_branding_path",
    "-f", "$build_lastchange_path",
    "-i", "$build_template_header",
    "-o", "$build_version_header",
  ]
}

# we need a target matching the parent folder name
executable("hello-cbase") {
  sources = [
    "common/cbase_switches.cc",
    "common/cbase_switches.hh",
    "common/hello_cbase_main.cc",
  ]
  include_dirs = [ target_gen_dir ]

  defines = [
    "_HELLO_CBASE_",
  ]

  deps = [
    "//build/util:last_change",
    ":version",
    "//base",
  ]

  #configs -= [
  #  "//build/config/compiler:chromium_code",
  #]
  #configs += [
  #  "//build/config/compiler:no_chromium_code",
  #]
}

# TODO make this an action in gn
# create version constant file
#'target_defaults': {
#    'actions': [{
#      'action_name': 'Make cbase_version.cc',
#      'variables': {
#        'make_version_cc_path': 'tools/build/make_version_cc.py',
#      },
#      'inputs': [
#        '<(make_version_cc_path)',
#        'VERSION',
#      ],
#      'outputs': [
#        '<(INTERMEDIATE_DIR)/cbase_version.cc',
#      ],
#      'action': [
#        'python',
#        '<(make_version_cc_path)',
#        '<@(_outputs)',
#        '<(version_full)',
#      ],
#      'process_outputs_as_sources': 1,
#    },],
#  },
#'branding_path': '<(DEPTH)/hello-cbase/BRANDING',

## Config used only by ICU code.
#config("icu_code") {
#  if (component_mode == "static_library") {
#    defines = [ "U_STATIC_IMPLEMENTATION" ]
#  }
#
#  if (is_win) {
#    # Disable some compiler warnings.
#    cflags = [
#      "/wd4005",  # Macro redefinition.
#      "/wd4068",  # Unknown pragmas.
#      "/wd4267",  # Conversion from size_t on 64-bits.
#      "/wd4996",  # Deprecated functions.
#    ]
#  } else if (is_linux) {
#    cflags = [
#      # Since ICU wants to internally use its own deprecated APIs, don't
#      # complain about it.
#      "-Wno-deprecated-declarations",
#      "-Wno-unused-function",
#    ]
#  } else if (is_clang) {
#    cflags = [
#      "-Wno-deprecated-declarations",
#      "-Wno-logical-op-parentheses",
#      "-Wno-tautological-compare",
#      "-Wno-switch",
#    ]
#  }
#}



