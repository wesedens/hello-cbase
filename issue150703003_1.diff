Index: base/i18n/build_utf8_validator_tables.cc
diff --git a/base/i18n/build_utf8_validator_tables.cc b/base/i18n/build_utf8_validator_tables.cc
index 34d3b99d8a0052691fa5d05d61f105733f3d4165..3002f165c34dab7274bf16bcd63a92e561a68b4c 100644
--- a/base/i18n/build_utf8_validator_tables.cc
+++ b/base/i18n/build_utf8_validator_tables.cc
@@ -314,7 +314,9 @@ uint8 MakeState(const StringSet& set,
   DCHECK_LT(0, range.from());
   DCHECK_LT(range.to(), 0xFF);
   const StateRange new_state_initializer[] = {
-      {0, 1}, {range.from(), target_state}, {range.to() + 1, 1}};
+      {0, 1},
+      {range.from(), target_state},
+      {static_cast<uint8_t>(range.to() + 1), 1}};
   states->push_back(
       State(new_state_initializer,
             new_state_initializer + arraysize(new_state_initializer)));
@@ -342,12 +344,13 @@ std::vector<State> GenerateStates(const PairVector& pairs) {
       DCHECK_EQ(1, states[0].back().target_state);
       states[0].back().target_state = target_state;
       DCHECK_LT(range.to(), 0xFF);
-      const StateRange new_range = {range.to() + 1, 1};
+      const StateRange new_range = {static_cast<uint8_t>(range.to() + 1), 1};
       states[0].push_back(new_range);
     } else {
       DCHECK_LT(range.to(), 0xFF);
-      const StateRange new_range_initializer[] = {{range.from(), target_state},
-                                                  {range.to() + 1, 1}};
+      const StateRange new_range_initializer[] = {
+          {range.from(), target_state},
+          {static_cast<uint8_t>(range.to() + 1), 1}};
       states[0]
           .insert(states[0].end(),
                   new_range_initializer,
